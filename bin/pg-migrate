#!/usr/bin/env node
var fs = require('fs')
, async = require('async')
, pgm = require('..')
, path  = require('path')
, Client = require('pg').Client
, parseUrl = require('url').parse

require('colors')

var argv = require('optimist')
.usage('Run PostgreSQL migration scripts.\nUsage: $0 -u postgres://postgres@localhost/mydb')
.describe('u', 'database url').demand('u').alias('u', 'url')
.describe('d', 'directory').alias('d', 'input').default('d', process.cwd())
.argv

var url = parseUrl(argv.u)

if (!url.host || !url.pathname) {
    console.error('ERROR: Invalid database URI'.red)
    return process.exit(1)
}

var dir = path.resolve(argv.d)
, conn = new Client(argv.u)
, alreadyRun

async.series([
    // Connect to the database
    function(cb) {
        conn.connect(cb)
    },

    // Create state table if it's missing
    function(cb) {
        conn.query([
            'CREATE TABLE IF NOT EXISTS pg_migrate (',
            '   migration_id text PRIMARY KEY',
            ')'
        ].join('\n'), cb)
    },

    // Perform upgrades
    function(cb) {
        require('../upgrade2')(dir, url, conn, cb)
    },

    // Find which migrations have already run
    function(cb) {
        conn.query('SELECT migration_id FROM pg_migrate', function(err, dr) {
            if (err) return cb(err)
            alreadyRun = dr.rows.map(function(row) {
                return row.migration_id
            })
            cb()
        })
    },

    // Run migrations
    function(cb) {
        var files = pgm.find(dir, alreadyRun)

        console.log('running %s migrations', files.length)

        async.eachSeries(files, function(f, cb) {
            process.stdout.write(f.filename + '...')
            var q = fs.readFileSync(path.join(dir, f.filename), 'utf8')
            if (argv.dry) {
                console.log('Would run:\n%s', q)
                return cb()
            }
            conn.query(q, function(err) {
                if (err) return cb(err)
                conn.query({
                    text: 'INSERT INTO pg_migrate (migration_id) VALUES ($1)',
                    values: [f.number.toString()]
                }, function(err) {
                    if (err) return cb(err)
                    console.log('OK'.green)
                    cb()
                })
            })
        }, cb)
    }
], function(err) {
    if (err) {
        console.error('ERROR: %s\n%s', err.message, err.stack)
        return process.exit(1)
    }
    process.exit(0)
})
