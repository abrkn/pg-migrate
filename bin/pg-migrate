#!/usr/bin/env node
var fs = require('fs')
, async = require('async')
, pgm = require('..')
, path  = require('path')
, Client = require('pg').Client
, parseUrl = require('url').parse

require('colors')

var argv = require('optimist')
.usage('Run PostgreSQL migration scripts.\nUsage: $0 -u postgres://postgres@localhost/mydb')
.describe('u', 'database url').demand('u').alias('u', 'url')
.describe('d', 'directory').alias('d', 'input').default('d', process.cwd())
.argv

var url = parseUrl(argv.u)
, statePath = path.join(argv.d, 'migrations.json')
, state = fs.existsSync(statePath) ? require(path.resolve(statePath)) : {}
, databaseId = url.host + url.pathname
, databaseState = state[databaseId] || (state[databaseId] = { completed: [] })

if (!url.host || !url.pathname) {
    console.error('ERROR: Invalid database URI'.red)
    return process.exit(1)
}

var dir = path.resolve(argv.d)

if (!require('../upgrade')(state, dir)) {
    saveState()
}

function saveState() {
    fs.writeFileSync(path.resolve(statePath), JSON.stringify(state, null, 4))
}

var files = pgm.find(dir, databaseState.completed)
, client = new Client(argv.u)
client.connect()

console.log('running %s migrations', files.length)

async.eachSeries(files, function(f, next) {
    process.stdout.write(f.filename + '...')
    var q = fs.readFileSync(path.join(dir, f.filename), 'utf8')
    client.query(q, function(err) {
        if (err) return next(err)
        databaseState.completed.push(f.number)
        console.log('OK'.green)
        next()
    })
}, function(err) {
    if (err) console.error('ERROR: %s\n'.red, err.message)
    saveState()
    process.exit(err ? 1 : 0)
})
